
---*** Lexing ***---

N = 10;
a = 0;
b = 1;
count = 0;

while (count < N) {
    print a;
    next = a + b;
    a = b;
    b = next;
    count = count + 1;
}



---*** Parsing ***---

Shift: ^ 
Shift: ^ N 
Shift: ^ N = 
Shift: ^ N = 10 
Reduce: ^ N = Atom
Reduce: ^ N = Expr
Shift: ^ N = Expr; 
Reduce: ^ Assn
Reduce: ^ Stmt
Shift: ^ Stmta 
Shift: ^ Stmta = 
Shift: ^ Stmta = 0 
Reduce: ^ Stmta = Atom
Reduce: ^ Stmta = Expr
Shift: ^ Stmta = Expr; 
Reduce: ^ StmtAssn
Reduce: ^ StmtStmt
Shift: ^ StmtStmtb 
Shift: ^ StmtStmtb = 
Shift: ^ StmtStmtb = 1 
Reduce: ^ StmtStmtb = Atom
Reduce: ^ StmtStmtb = Expr
Shift: ^ StmtStmtb = Expr; 
Reduce: ^ StmtStmtAssn
Reduce: ^ StmtStmtStmt
Shift: ^ StmtStmtStmtcount 
Shift: ^ StmtStmtStmtcount = 
Shift: ^ StmtStmtStmtcount = 0 
Reduce: ^ StmtStmtStmtcount = Atom
Reduce: ^ StmtStmtStmtcount = Expr
Shift: ^ StmtStmtStmtcount = Expr; 
Reduce: ^ StmtStmtStmtAssn
Reduce: ^ StmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtwhile 
Shift: ^ StmtStmtStmtStmtwhile ( 
Shift: ^ StmtStmtStmtStmtwhile ( count 
Reduce: ^ StmtStmtStmtStmtwhile ( Atom
Reduce: ^ StmtStmtStmtStmtwhile ( Expr
Shift: ^ StmtStmtStmtStmtwhile ( Expr< 
Shift: ^ StmtStmtStmtStmtwhile ( Expr< N 
Reduce: ^ StmtStmtStmtStmtwhile ( Expr< Atom
Reduce: ^ StmtStmtStmtStmtwhile ( Expr< Expr
Reduce: ^ StmtStmtStmtStmtwhile ( Bexp
Reduce: ^ StmtStmtStmtStmtwhile ( Expr
Shift: ^ StmtStmtStmtStmtwhile ( Expr) 
Reduce: ^ StmtStmtStmtStmtwhile Pexp
Reduce: ^ StmtStmtStmtStmtwhile Expr
Shift: ^ StmtStmtStmtStmtwhile Expr{ 
Shift: ^ StmtStmtStmtStmtwhile Expr{ print 
Shift: ^ StmtStmtStmtStmtwhile Expr{ print a 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ print Atom
Reduce: ^ StmtStmtStmtStmtwhile Expr{ print Expr
Shift: ^ StmtStmtStmtStmtwhile Expr{ print Expr; 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Prnt
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Stmt
Shift: ^ StmtStmtStmtStmtwhile Expr{ Stmtnext 
Shift: ^ StmtStmtStmtStmtwhile Expr{ Stmtnext = 
Shift: ^ StmtStmtStmtStmtwhile Expr{ Stmtnext = a 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Stmtnext = Atom
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Stmtnext = Expr
Shift: ^ StmtStmtStmtStmtwhile Expr{ Stmtnext = Expr+ 
Shift: ^ StmtStmtStmtStmtwhile Expr{ Stmtnext = Expr+ b 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Stmtnext = Expr+ Atom
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Stmtnext = Expr+ Expr
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Stmtnext = Bexp
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Stmtnext = Expr
Shift: ^ StmtStmtStmtStmtwhile Expr{ Stmtnext = Expr; 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtAssn
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmt
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmta 
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmta = 
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmta = b 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmta = Atom
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmta = Expr
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmta = Expr; 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtAssn
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmt
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtb 
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtb = 
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtb = next 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtb = Atom
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtb = Expr
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtb = Expr; 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtAssn
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtcount 
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtcount = 
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtcount = count 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtcount = Atom
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtcount = Expr
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtcount = Expr+ 
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtcount = Expr+ 1 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtcount = Expr+ Atom
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtcount = Expr+ Expr
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtcount = Bexp
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtcount = Expr
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtcount = Expr; 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtAssn
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmtStmtStmtStmt} 
Reduce: ^ StmtStmtStmtStmtWhil
Reduce: ^ StmtStmtStmtStmtCtrl
Reduce: ^ StmtStmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtStmt$ 
Reduce: Unit
ACCEPT Unit


---*** Running ***---

0
1
1
2
3
5
8
13
21
34
