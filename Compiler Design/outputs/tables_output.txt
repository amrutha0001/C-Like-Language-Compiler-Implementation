
---*** Lexing ***---

num = 5;
i = 1;

print "Multiplication Table of " num; 
while (i <= 10) {
    print num * i;
    i = i + 1;
}



---*** Parsing ***---

Shift: ^ 
Shift: ^ num 
Shift: ^ num = 
Shift: ^ num = 5 
Reduce: ^ num = Atom
Reduce: ^ num = Expr
Shift: ^ num = Expr; 
Reduce: ^ Assn
Reduce: ^ Stmt
Shift: ^ Stmti 
Shift: ^ Stmti = 
Shift: ^ Stmti = 1 
Reduce: ^ Stmti = Atom
Reduce: ^ Stmti = Expr
Shift: ^ Stmti = Expr; 
Reduce: ^ StmtAssn
Reduce: ^ StmtStmt
Shift: ^ StmtStmtprint 
Shift: ^ StmtStmtprint "Multiplication Table of " 
Shift: ^ StmtStmtprint "Multiplication Table of " num 
Reduce: ^ StmtStmtprint "Multiplication Table of " Atom
Reduce: ^ StmtStmtprint "Multiplication Table of " Expr
Shift: ^ StmtStmtprint "Multiplication Table of " Expr; 
Reduce: ^ StmtStmtPrnt
Reduce: ^ StmtStmtStmt
Shift: ^ StmtStmtStmtwhile 
Shift: ^ StmtStmtStmtwhile ( 
Shift: ^ StmtStmtStmtwhile ( i 
Reduce: ^ StmtStmtStmtwhile ( Atom
Reduce: ^ StmtStmtStmtwhile ( Expr
Shift: ^ StmtStmtStmtwhile ( Expr<= 
Shift: ^ StmtStmtStmtwhile ( Expr<= 10 
Reduce: ^ StmtStmtStmtwhile ( Expr<= Atom
Reduce: ^ StmtStmtStmtwhile ( Expr<= Expr
Reduce: ^ StmtStmtStmtwhile ( Bexp
Reduce: ^ StmtStmtStmtwhile ( Expr
Shift: ^ StmtStmtStmtwhile ( Expr) 
Reduce: ^ StmtStmtStmtwhile Pexp
Reduce: ^ StmtStmtStmtwhile Expr
Shift: ^ StmtStmtStmtwhile Expr{ 
Shift: ^ StmtStmtStmtwhile Expr{ print 
Shift: ^ StmtStmtStmtwhile Expr{ print num 
Reduce: ^ StmtStmtStmtwhile Expr{ print Atom
Reduce: ^ StmtStmtStmtwhile Expr{ print Expr
Shift: ^ StmtStmtStmtwhile Expr{ print Expr* 
Shift: ^ StmtStmtStmtwhile Expr{ print Expr* i 
Reduce: ^ StmtStmtStmtwhile Expr{ print Expr* Atom
Reduce: ^ StmtStmtStmtwhile Expr{ print Expr* Expr
Reduce: ^ StmtStmtStmtwhile Expr{ print Bexp
Reduce: ^ StmtStmtStmtwhile Expr{ print Expr
Shift: ^ StmtStmtStmtwhile Expr{ print Expr; 
Reduce: ^ StmtStmtStmtwhile Expr{ Prnt
Reduce: ^ StmtStmtStmtwhile Expr{ Stmt
Shift: ^ StmtStmtStmtwhile Expr{ Stmti 
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = 
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = i 
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Atom
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ 
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ 1 
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ Atom
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ Expr
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Bexp
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = Expr; 
Reduce: ^ StmtStmtStmtwhile Expr{ StmtAssn
Reduce: ^ StmtStmtStmtwhile Expr{ StmtStmt
Shift: ^ StmtStmtStmtwhile Expr{ StmtStmt} 
Reduce: ^ StmtStmtStmtWhil
Reduce: ^ StmtStmtStmtCtrl
Reduce: ^ StmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmt$ 
Reduce: Unit
ACCEPT Unit


---*** Running ***---

Multiplication Table of 5
5
10
15
20
25
30
35
40
45
50
