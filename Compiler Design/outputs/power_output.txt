
---*** Lexing ***---

base = 2;
exponent = 5;
result = 1;
i = 0;

while (i < exponent) {
    result = result * base;
    i = i + 1;
}

print "Base : "base;
print "Exponent : "exponent;
print "Result : " result;



---*** Parsing ***---

Shift: ^ 
Shift: ^ base 
Shift: ^ base = 
Shift: ^ base = 2 
Reduce: ^ base = Atom
Reduce: ^ base = Expr
Shift: ^ base = Expr; 
Reduce: ^ Assn
Reduce: ^ Stmt
Shift: ^ Stmtexponent 
Shift: ^ Stmtexponent = 
Shift: ^ Stmtexponent = 5 
Reduce: ^ Stmtexponent = Atom
Reduce: ^ Stmtexponent = Expr
Shift: ^ Stmtexponent = Expr; 
Reduce: ^ StmtAssn
Reduce: ^ StmtStmt
Shift: ^ StmtStmtresult 
Shift: ^ StmtStmtresult = 
Shift: ^ StmtStmtresult = 1 
Reduce: ^ StmtStmtresult = Atom
Reduce: ^ StmtStmtresult = Expr
Shift: ^ StmtStmtresult = Expr; 
Reduce: ^ StmtStmtAssn
Reduce: ^ StmtStmtStmt
Shift: ^ StmtStmtStmti 
Shift: ^ StmtStmtStmti = 
Shift: ^ StmtStmtStmti = 0 
Reduce: ^ StmtStmtStmti = Atom
Reduce: ^ StmtStmtStmti = Expr
Shift: ^ StmtStmtStmti = Expr; 
Reduce: ^ StmtStmtStmtAssn
Reduce: ^ StmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtwhile 
Shift: ^ StmtStmtStmtStmtwhile ( 
Shift: ^ StmtStmtStmtStmtwhile ( i 
Reduce: ^ StmtStmtStmtStmtwhile ( Atom
Reduce: ^ StmtStmtStmtStmtwhile ( Expr
Shift: ^ StmtStmtStmtStmtwhile ( Expr< 
Shift: ^ StmtStmtStmtStmtwhile ( Expr< exponent 
Reduce: ^ StmtStmtStmtStmtwhile ( Expr< Atom
Reduce: ^ StmtStmtStmtStmtwhile ( Expr< Expr
Reduce: ^ StmtStmtStmtStmtwhile ( Bexp
Reduce: ^ StmtStmtStmtStmtwhile ( Expr
Shift: ^ StmtStmtStmtStmtwhile ( Expr) 
Reduce: ^ StmtStmtStmtStmtwhile Pexp
Reduce: ^ StmtStmtStmtStmtwhile Expr
Shift: ^ StmtStmtStmtStmtwhile Expr{ 
Shift: ^ StmtStmtStmtStmtwhile Expr{ result 
Shift: ^ StmtStmtStmtStmtwhile Expr{ result = 
Shift: ^ StmtStmtStmtStmtwhile Expr{ result = result 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ result = Atom
Reduce: ^ StmtStmtStmtStmtwhile Expr{ result = Expr
Shift: ^ StmtStmtStmtStmtwhile Expr{ result = Expr* 
Shift: ^ StmtStmtStmtStmtwhile Expr{ result = Expr* base 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ result = Expr* Atom
Reduce: ^ StmtStmtStmtStmtwhile Expr{ result = Expr* Expr
Reduce: ^ StmtStmtStmtStmtwhile Expr{ result = Bexp
Reduce: ^ StmtStmtStmtStmtwhile Expr{ result = Expr
Shift: ^ StmtStmtStmtStmtwhile Expr{ result = Expr; 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Assn
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Stmt
Shift: ^ StmtStmtStmtStmtwhile Expr{ Stmti 
Shift: ^ StmtStmtStmtStmtwhile Expr{ Stmti = 
Shift: ^ StmtStmtStmtStmtwhile Expr{ Stmti = i 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Stmti = Atom
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Stmti = Expr
Shift: ^ StmtStmtStmtStmtwhile Expr{ Stmti = Expr+ 
Shift: ^ StmtStmtStmtStmtwhile Expr{ Stmti = Expr+ 1 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Stmti = Expr+ Atom
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Stmti = Expr+ Expr
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Stmti = Bexp
Reduce: ^ StmtStmtStmtStmtwhile Expr{ Stmti = Expr
Shift: ^ StmtStmtStmtStmtwhile Expr{ Stmti = Expr; 
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtAssn
Reduce: ^ StmtStmtStmtStmtwhile Expr{ StmtStmt
Shift: ^ StmtStmtStmtStmtwhile Expr{ StmtStmt} 
Reduce: ^ StmtStmtStmtStmtWhil
Reduce: ^ StmtStmtStmtStmtCtrl
Reduce: ^ StmtStmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtStmtprint 
Shift: ^ StmtStmtStmtStmtStmtprint "Base : " 
Shift: ^ StmtStmtStmtStmtStmtprint "Base : " base 
Reduce: ^ StmtStmtStmtStmtStmtprint "Base : " Atom
Reduce: ^ StmtStmtStmtStmtStmtprint "Base : " Expr
Shift: ^ StmtStmtStmtStmtStmtprint "Base : " Expr; 
Reduce: ^ StmtStmtStmtStmtStmtPrnt
Reduce: ^ StmtStmtStmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtStmtStmtprint 
Shift: ^ StmtStmtStmtStmtStmtStmtprint "Exponent : " 
Shift: ^ StmtStmtStmtStmtStmtStmtprint "Exponent : " exponent 
Reduce: ^ StmtStmtStmtStmtStmtStmtprint "Exponent : " Atom
Reduce: ^ StmtStmtStmtStmtStmtStmtprint "Exponent : " Expr
Shift: ^ StmtStmtStmtStmtStmtStmtprint "Exponent : " Expr; 
Reduce: ^ StmtStmtStmtStmtStmtStmtPrnt
Reduce: ^ StmtStmtStmtStmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtStmtStmtStmtprint 
Shift: ^ StmtStmtStmtStmtStmtStmtStmtprint "Result : " 
Shift: ^ StmtStmtStmtStmtStmtStmtStmtprint "Result : " result 
Reduce: ^ StmtStmtStmtStmtStmtStmtStmtprint "Result : " Atom
Reduce: ^ StmtStmtStmtStmtStmtStmtStmtprint "Result : " Expr
Shift: ^ StmtStmtStmtStmtStmtStmtStmtprint "Result : " Expr; 
Reduce: ^ StmtStmtStmtStmtStmtStmtStmtPrnt
Reduce: ^ StmtStmtStmtStmtStmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtStmtStmtStmtStmt$ 
Reduce: Unit
ACCEPT Unit


---*** Running ***---

Base : 2
Exponent : 5
Result : 32
