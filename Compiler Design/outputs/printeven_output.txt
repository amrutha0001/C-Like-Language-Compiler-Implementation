
---*** Lexing ***---

N = 10;
i = 0;

print "Even numbers till " N;

while (i <= N) {
    if (i % 2 == 0) {
        print i;
    }
    i = i + 1;
}



---*** Parsing ***---

Shift: ^ 
Shift: ^ N 
Shift: ^ N = 
Shift: ^ N = 10 
Reduce: ^ N = Atom
Reduce: ^ N = Expr
Shift: ^ N = Expr; 
Reduce: ^ Assn
Reduce: ^ Stmt
Shift: ^ Stmti 
Shift: ^ Stmti = 
Shift: ^ Stmti = 0 
Reduce: ^ Stmti = Atom
Reduce: ^ Stmti = Expr
Shift: ^ Stmti = Expr; 
Reduce: ^ StmtAssn
Reduce: ^ StmtStmt
Shift: ^ StmtStmtprint 
Shift: ^ StmtStmtprint "Even numbers till " 
Shift: ^ StmtStmtprint "Even numbers till " N 
Reduce: ^ StmtStmtprint "Even numbers till " Atom
Reduce: ^ StmtStmtprint "Even numbers till " Expr
Shift: ^ StmtStmtprint "Even numbers till " Expr; 
Reduce: ^ StmtStmtPrnt
Reduce: ^ StmtStmtStmt
Shift: ^ StmtStmtStmtwhile 
Shift: ^ StmtStmtStmtwhile ( 
Shift: ^ StmtStmtStmtwhile ( i 
Reduce: ^ StmtStmtStmtwhile ( Atom
Reduce: ^ StmtStmtStmtwhile ( Expr
Shift: ^ StmtStmtStmtwhile ( Expr<= 
Shift: ^ StmtStmtStmtwhile ( Expr<= N 
Reduce: ^ StmtStmtStmtwhile ( Expr<= Atom
Reduce: ^ StmtStmtStmtwhile ( Expr<= Expr
Reduce: ^ StmtStmtStmtwhile ( Bexp
Reduce: ^ StmtStmtStmtwhile ( Expr
Shift: ^ StmtStmtStmtwhile ( Expr) 
Reduce: ^ StmtStmtStmtwhile Pexp
Reduce: ^ StmtStmtStmtwhile Expr
Shift: ^ StmtStmtStmtwhile Expr{ 
Shift: ^ StmtStmtStmtwhile Expr{ if 
Shift: ^ StmtStmtStmtwhile Expr{ if ( 
Shift: ^ StmtStmtStmtwhile Expr{ if ( i 
Reduce: ^ StmtStmtStmtwhile Expr{ if ( Atom
Reduce: ^ StmtStmtStmtwhile Expr{ if ( Expr
Shift: ^ StmtStmtStmtwhile Expr{ if ( Expr% 
Shift: ^ StmtStmtStmtwhile Expr{ if ( Expr% 2 
Reduce: ^ StmtStmtStmtwhile Expr{ if ( Expr% Atom
Reduce: ^ StmtStmtStmtwhile Expr{ if ( Expr% Expr
Reduce: ^ StmtStmtStmtwhile Expr{ if ( Bexp
Reduce: ^ StmtStmtStmtwhile Expr{ if ( Expr
Shift: ^ StmtStmtStmtwhile Expr{ if ( Expr== 
Shift: ^ StmtStmtStmtwhile Expr{ if ( Expr== 0 
Reduce: ^ StmtStmtStmtwhile Expr{ if ( Expr== Atom
Reduce: ^ StmtStmtStmtwhile Expr{ if ( Expr== Expr
Reduce: ^ StmtStmtStmtwhile Expr{ if ( Bexp
Reduce: ^ StmtStmtStmtwhile Expr{ if ( Expr
Shift: ^ StmtStmtStmtwhile Expr{ if ( Expr) 
Reduce: ^ StmtStmtStmtwhile Expr{ if Pexp
Reduce: ^ StmtStmtStmtwhile Expr{ if Expr
Shift: ^ StmtStmtStmtwhile Expr{ if Expr{ 
Shift: ^ StmtStmtStmtwhile Expr{ if Expr{ print 
Shift: ^ StmtStmtStmtwhile Expr{ if Expr{ print i 
Reduce: ^ StmtStmtStmtwhile Expr{ if Expr{ print Atom
Reduce: ^ StmtStmtStmtwhile Expr{ if Expr{ print Expr
Shift: ^ StmtStmtStmtwhile Expr{ if Expr{ print Expr; 
Reduce: ^ StmtStmtStmtwhile Expr{ if Expr{ Prnt
Reduce: ^ StmtStmtStmtwhile Expr{ if Expr{ Stmt
Shift: ^ StmtStmtStmtwhile Expr{ if Expr{ Stmt} 
Reduce: ^ StmtStmtStmtwhile Expr{ Cond
Reduce: ^ StmtStmtStmtwhile Expr{ Ctrl
Reduce: ^ StmtStmtStmtwhile Expr{ Stmt
Shift: ^ StmtStmtStmtwhile Expr{ Stmti 
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = 
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = i 
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Atom
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ 
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ 1 
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ Atom
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ Expr
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Bexp
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = Expr; 
Reduce: ^ StmtStmtStmtwhile Expr{ StmtAssn
Reduce: ^ StmtStmtStmtwhile Expr{ StmtStmt
Shift: ^ StmtStmtStmtwhile Expr{ StmtStmt} 
Reduce: ^ StmtStmtStmtWhil
Reduce: ^ StmtStmtStmtCtrl
Reduce: ^ StmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmt$ 
Reduce: Unit
ACCEPT Unit


---*** Running ***---

Even numbers till 10
0
2
4
6
8
10
