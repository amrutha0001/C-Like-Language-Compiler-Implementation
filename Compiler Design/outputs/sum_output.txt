
---*** Lexing ***---

N = 10;
sum = 0;
i = 1;

while (i <= N) {
    sum = sum + i;
    i = i + 1;
}

print "Sum of numbers from 1 to " N;
print sum;


---*** Parsing ***---

Shift: ^ 
Shift: ^ N 
Shift: ^ N = 
Shift: ^ N = 10 
Reduce: ^ N = Atom
Reduce: ^ N = Expr
Shift: ^ N = Expr; 
Reduce: ^ Assn
Reduce: ^ Stmt
Shift: ^ Stmtsum 
Shift: ^ Stmtsum = 
Shift: ^ Stmtsum = 0 
Reduce: ^ Stmtsum = Atom
Reduce: ^ Stmtsum = Expr
Shift: ^ Stmtsum = Expr; 
Reduce: ^ StmtAssn
Reduce: ^ StmtStmt
Shift: ^ StmtStmti 
Shift: ^ StmtStmti = 
Shift: ^ StmtStmti = 1 
Reduce: ^ StmtStmti = Atom
Reduce: ^ StmtStmti = Expr
Shift: ^ StmtStmti = Expr; 
Reduce: ^ StmtStmtAssn
Reduce: ^ StmtStmtStmt
Shift: ^ StmtStmtStmtwhile 
Shift: ^ StmtStmtStmtwhile ( 
Shift: ^ StmtStmtStmtwhile ( i 
Reduce: ^ StmtStmtStmtwhile ( Atom
Reduce: ^ StmtStmtStmtwhile ( Expr
Shift: ^ StmtStmtStmtwhile ( Expr<= 
Shift: ^ StmtStmtStmtwhile ( Expr<= N 
Reduce: ^ StmtStmtStmtwhile ( Expr<= Atom
Reduce: ^ StmtStmtStmtwhile ( Expr<= Expr
Reduce: ^ StmtStmtStmtwhile ( Bexp
Reduce: ^ StmtStmtStmtwhile ( Expr
Shift: ^ StmtStmtStmtwhile ( Expr) 
Reduce: ^ StmtStmtStmtwhile Pexp
Reduce: ^ StmtStmtStmtwhile Expr
Shift: ^ StmtStmtStmtwhile Expr{ 
Shift: ^ StmtStmtStmtwhile Expr{ sum 
Shift: ^ StmtStmtStmtwhile Expr{ sum = 
Shift: ^ StmtStmtStmtwhile Expr{ sum = sum 
Reduce: ^ StmtStmtStmtwhile Expr{ sum = Atom
Reduce: ^ StmtStmtStmtwhile Expr{ sum = Expr
Shift: ^ StmtStmtStmtwhile Expr{ sum = Expr+ 
Shift: ^ StmtStmtStmtwhile Expr{ sum = Expr+ i 
Reduce: ^ StmtStmtStmtwhile Expr{ sum = Expr+ Atom
Reduce: ^ StmtStmtStmtwhile Expr{ sum = Expr+ Expr
Reduce: ^ StmtStmtStmtwhile Expr{ sum = Bexp
Reduce: ^ StmtStmtStmtwhile Expr{ sum = Expr
Shift: ^ StmtStmtStmtwhile Expr{ sum = Expr; 
Reduce: ^ StmtStmtStmtwhile Expr{ Assn
Reduce: ^ StmtStmtStmtwhile Expr{ Stmt
Shift: ^ StmtStmtStmtwhile Expr{ Stmti 
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = 
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = i 
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Atom
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ 
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ 1 
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ Atom
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ Expr
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Bexp
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = Expr; 
Reduce: ^ StmtStmtStmtwhile Expr{ StmtAssn
Reduce: ^ StmtStmtStmtwhile Expr{ StmtStmt
Shift: ^ StmtStmtStmtwhile Expr{ StmtStmt} 
Reduce: ^ StmtStmtStmtWhil
Reduce: ^ StmtStmtStmtCtrl
Reduce: ^ StmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtprint 
Shift: ^ StmtStmtStmtStmtprint "Sum of numbers from 1 to " 
Shift: ^ StmtStmtStmtStmtprint "Sum of numbers from 1 to " N 
Reduce: ^ StmtStmtStmtStmtprint "Sum of numbers from 1 to " Atom
Reduce: ^ StmtStmtStmtStmtprint "Sum of numbers from 1 to " Expr
Shift: ^ StmtStmtStmtStmtprint "Sum of numbers from 1 to " Expr; 
Reduce: ^ StmtStmtStmtStmtPrnt
Reduce: ^ StmtStmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtStmtprint 
Shift: ^ StmtStmtStmtStmtStmtprint sum 
Reduce: ^ StmtStmtStmtStmtStmtprint Atom
Reduce: ^ StmtStmtStmtStmtStmtprint Expr
Shift: ^ StmtStmtStmtStmtStmtprint Expr; 
Reduce: ^ StmtStmtStmtStmtStmtPrnt
Reduce: ^ StmtStmtStmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtStmtStmt$ 
Reduce: Unit
ACCEPT Unit


---*** Running ***---

Sum of numbers from 1 to 10
55
