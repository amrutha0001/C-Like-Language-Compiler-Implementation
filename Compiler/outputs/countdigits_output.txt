
---*** Lexing ***---

num = 123456;
count = 0;

print "Number : "num;
while (num != 0) {
    num = num / 10;
    count = count + 1;
}

print"No.of digits : "count;


---*** Parsing ***---

Shift: ^ 
Shift: ^ num 
Shift: ^ num = 
Shift: ^ num = 123456 
Reduce: ^ num = Atom
Reduce: ^ num = Expr
Shift: ^ num = Expr; 
Reduce: ^ Assn
Reduce: ^ Stmt
Shift: ^ Stmtcount 
Shift: ^ Stmtcount = 
Shift: ^ Stmtcount = 0 
Reduce: ^ Stmtcount = Atom
Reduce: ^ Stmtcount = Expr
Shift: ^ Stmtcount = Expr; 
Reduce: ^ StmtAssn
Reduce: ^ StmtStmt
Shift: ^ StmtStmtprint 
Shift: ^ StmtStmtprint "Number : " 
Shift: ^ StmtStmtprint "Number : " num 
Reduce: ^ StmtStmtprint "Number : " Atom
Reduce: ^ StmtStmtprint "Number : " Expr
Shift: ^ StmtStmtprint "Number : " Expr; 
Reduce: ^ StmtStmtPrnt
Reduce: ^ StmtStmtStmt
Shift: ^ StmtStmtStmtwhile 
Shift: ^ StmtStmtStmtwhile ( 
Shift: ^ StmtStmtStmtwhile ( num 
Reduce: ^ StmtStmtStmtwhile ( Atom
Reduce: ^ StmtStmtStmtwhile ( Expr
Shift: ^ StmtStmtStmtwhile ( Expr!= 
Shift: ^ StmtStmtStmtwhile ( Expr!= 0 
Reduce: ^ StmtStmtStmtwhile ( Expr!= Atom
Reduce: ^ StmtStmtStmtwhile ( Expr!= Expr
Reduce: ^ StmtStmtStmtwhile ( Bexp
Reduce: ^ StmtStmtStmtwhile ( Expr
Shift: ^ StmtStmtStmtwhile ( Expr) 
Reduce: ^ StmtStmtStmtwhile Pexp
Reduce: ^ StmtStmtStmtwhile Expr
Shift: ^ StmtStmtStmtwhile Expr{ 
Shift: ^ StmtStmtStmtwhile Expr{ num 
Shift: ^ StmtStmtStmtwhile Expr{ num = 
Shift: ^ StmtStmtStmtwhile Expr{ num = num 
Reduce: ^ StmtStmtStmtwhile Expr{ num = Atom
Reduce: ^ StmtStmtStmtwhile Expr{ num = Expr
Shift: ^ StmtStmtStmtwhile Expr{ num = Expr/ 
Shift: ^ StmtStmtStmtwhile Expr{ num = Expr/ 10 
Reduce: ^ StmtStmtStmtwhile Expr{ num = Expr/ Atom
Reduce: ^ StmtStmtStmtwhile Expr{ num = Expr/ Expr
Reduce: ^ StmtStmtStmtwhile Expr{ num = Bexp
Reduce: ^ StmtStmtStmtwhile Expr{ num = Expr
Shift: ^ StmtStmtStmtwhile Expr{ num = Expr; 
Reduce: ^ StmtStmtStmtwhile Expr{ Assn
Reduce: ^ StmtStmtStmtwhile Expr{ Stmt
Shift: ^ StmtStmtStmtwhile Expr{ Stmtcount 
Shift: ^ StmtStmtStmtwhile Expr{ Stmtcount = 
Shift: ^ StmtStmtStmtwhile Expr{ Stmtcount = count 
Reduce: ^ StmtStmtStmtwhile Expr{ Stmtcount = Atom
Reduce: ^ StmtStmtStmtwhile Expr{ Stmtcount = Expr
Shift: ^ StmtStmtStmtwhile Expr{ Stmtcount = Expr+ 
Shift: ^ StmtStmtStmtwhile Expr{ Stmtcount = Expr+ 1 
Reduce: ^ StmtStmtStmtwhile Expr{ Stmtcount = Expr+ Atom
Reduce: ^ StmtStmtStmtwhile Expr{ Stmtcount = Expr+ Expr
Reduce: ^ StmtStmtStmtwhile Expr{ Stmtcount = Bexp
Reduce: ^ StmtStmtStmtwhile Expr{ Stmtcount = Expr
Shift: ^ StmtStmtStmtwhile Expr{ Stmtcount = Expr; 
Reduce: ^ StmtStmtStmtwhile Expr{ StmtAssn
Reduce: ^ StmtStmtStmtwhile Expr{ StmtStmt
Shift: ^ StmtStmtStmtwhile Expr{ StmtStmt} 
Reduce: ^ StmtStmtStmtWhil
Reduce: ^ StmtStmtStmtCtrl
Reduce: ^ StmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtprint 
Shift: ^ StmtStmtStmtStmtprint "No.of digits : " 
Shift: ^ StmtStmtStmtStmtprint "No.of digits : " count 
Reduce: ^ StmtStmtStmtStmtprint "No.of digits : " Atom
Reduce: ^ StmtStmtStmtStmtprint "No.of digits : " Expr
Shift: ^ StmtStmtStmtStmtprint "No.of digits : " Expr; 
Reduce: ^ StmtStmtStmtStmtPrnt
Reduce: ^ StmtStmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtStmt$ 
Reduce: Unit
ACCEPT Unit


---*** Running ***---

Number : 123456
No.of digits : 6
