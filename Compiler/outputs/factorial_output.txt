
---*** Lexing ***---

N = 5;
fact = 1;
i = 1;

while (i <= N) {
    fact = fact * i;
    i = i + 1;
}

print "Factorial is " fact;


---*** Parsing ***---

Shift: ^ 
Shift: ^ N 
Shift: ^ N = 
Shift: ^ N = 5 
Reduce: ^ N = Atom
Reduce: ^ N = Expr
Shift: ^ N = Expr; 
Reduce: ^ Assn
Reduce: ^ Stmt
Shift: ^ Stmtfact 
Shift: ^ Stmtfact = 
Shift: ^ Stmtfact = 1 
Reduce: ^ Stmtfact = Atom
Reduce: ^ Stmtfact = Expr
Shift: ^ Stmtfact = Expr; 
Reduce: ^ StmtAssn
Reduce: ^ StmtStmt
Shift: ^ StmtStmti 
Shift: ^ StmtStmti = 
Shift: ^ StmtStmti = 1 
Reduce: ^ StmtStmti = Atom
Reduce: ^ StmtStmti = Expr
Shift: ^ StmtStmti = Expr; 
Reduce: ^ StmtStmtAssn
Reduce: ^ StmtStmtStmt
Shift: ^ StmtStmtStmtwhile 
Shift: ^ StmtStmtStmtwhile ( 
Shift: ^ StmtStmtStmtwhile ( i 
Reduce: ^ StmtStmtStmtwhile ( Atom
Reduce: ^ StmtStmtStmtwhile ( Expr
Shift: ^ StmtStmtStmtwhile ( Expr<= 
Shift: ^ StmtStmtStmtwhile ( Expr<= N 
Reduce: ^ StmtStmtStmtwhile ( Expr<= Atom
Reduce: ^ StmtStmtStmtwhile ( Expr<= Expr
Reduce: ^ StmtStmtStmtwhile ( Bexp
Reduce: ^ StmtStmtStmtwhile ( Expr
Shift: ^ StmtStmtStmtwhile ( Expr) 
Reduce: ^ StmtStmtStmtwhile Pexp
Reduce: ^ StmtStmtStmtwhile Expr
Shift: ^ StmtStmtStmtwhile Expr{ 
Shift: ^ StmtStmtStmtwhile Expr{ fact 
Shift: ^ StmtStmtStmtwhile Expr{ fact = 
Shift: ^ StmtStmtStmtwhile Expr{ fact = fact 
Reduce: ^ StmtStmtStmtwhile Expr{ fact = Atom
Reduce: ^ StmtStmtStmtwhile Expr{ fact = Expr
Shift: ^ StmtStmtStmtwhile Expr{ fact = Expr* 
Shift: ^ StmtStmtStmtwhile Expr{ fact = Expr* i 
Reduce: ^ StmtStmtStmtwhile Expr{ fact = Expr* Atom
Reduce: ^ StmtStmtStmtwhile Expr{ fact = Expr* Expr
Reduce: ^ StmtStmtStmtwhile Expr{ fact = Bexp
Reduce: ^ StmtStmtStmtwhile Expr{ fact = Expr
Shift: ^ StmtStmtStmtwhile Expr{ fact = Expr; 
Reduce: ^ StmtStmtStmtwhile Expr{ Assn
Reduce: ^ StmtStmtStmtwhile Expr{ Stmt
Shift: ^ StmtStmtStmtwhile Expr{ Stmti 
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = 
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = i 
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Atom
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ 
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ 1 
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ Atom
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr+ Expr
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Bexp
Reduce: ^ StmtStmtStmtwhile Expr{ Stmti = Expr
Shift: ^ StmtStmtStmtwhile Expr{ Stmti = Expr; 
Reduce: ^ StmtStmtStmtwhile Expr{ StmtAssn
Reduce: ^ StmtStmtStmtwhile Expr{ StmtStmt
Shift: ^ StmtStmtStmtwhile Expr{ StmtStmt} 
Reduce: ^ StmtStmtStmtWhil
Reduce: ^ StmtStmtStmtCtrl
Reduce: ^ StmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtprint 
Shift: ^ StmtStmtStmtStmtprint "Factorial is " 
Shift: ^ StmtStmtStmtStmtprint "Factorial is " fact 
Reduce: ^ StmtStmtStmtStmtprint "Factorial is " Atom
Reduce: ^ StmtStmtStmtStmtprint "Factorial is " Expr
Shift: ^ StmtStmtStmtStmtprint "Factorial is " Expr; 
Reduce: ^ StmtStmtStmtStmtPrnt
Reduce: ^ StmtStmtStmtStmtStmt
Shift: ^ StmtStmtStmtStmtStmt$ 
Reduce: Unit
ACCEPT Unit


---*** Running ***---

Factorial is 120
